#!/bin/bash
cat <<EOF
endpoint: ${JIRA_ENDPOINT}
user: ${JIRA_USERNAME}
password-source: keyring
authentication-method: api-token
project: CPW
editor: vim --cmd "autocmd BufWritePre * :silent!%s/\`\`\`/{code}/g"

custom-commands:
  - name: epics
    help: list epics for specific project
    script: |-
      {{jira}} list --template epics-list --query "resolution = unresolved AND issuetype = Epic AND project = \$JIRA_PROJECT ORDER BY Rank Desc" --queryfields=issuetype,priority,assignee,status,created,reporter
  - name: sprint-tix
    help: display issues for active sprint
    script: |-
      {{jira}} list --template table --query "sprint in openSprints() and type != epic and resolution = unresolved and project=DATA ORDER BY rank asc, created"
  - name: sprint
    help: The names/numbers of sprints
    options:
      - name: next
        short: 'n'
        type: bool
        help: get the next sprint, rather than the active one
    args:
      - name: PROJ
    script: |-
      state={{if options.next}}future{{else}}active{{end}}
      project={{if args.PROJ}}{{args.PROJ}}{{else}}\$JIRA_PROJECT{{end}}
      echo "state: \$state"
      echo "project: \$project"
      board_id=\$({{jira}} req "/rest/agile/1.0/board?projectKeyOrId=\$project&type=scrum" --gjq values.0.id)
      {{jira}} req "/rest/agile/1.0/board/\$board_id/sprint?state=active" --gjq values.0.id
      {{jira}} req "/rest/agile/1.0/board/\$board_id/sprint?state=active" --gjq values.0.name

  - name: screate
    help: creates a task in the current sprint
    options:
      - name: next
        short: 'n'
        type: bool
        help: get the next sprint, rather than the active one
    args:
      - name: PROJ
    script: |-
      set -x
      STATE={{if options.next}}future{{else}}active{{end}}
      PROJECT={{if args.PROJ}}{{args.PROJ}}{{else}}\$JIRA_PROJECT{{end}}
      BOARD_ID=\$({{jira}} req "/rest/agile/1.0/board?projectKeyOrId=\$PROJECT&type=scrum" --gjq values.0.id)
      SPRINT=\$({{jira}} req "/rest/agile/1.0/board/\$BOARD_ID/sprint?state=active" --gjq values.0.id)
      OUTFILE=$(mktemp)
      ISSUE=\$({{jira}} create -o sprint=\$SPRINT -p \$PROJECT 2>&1 </dev/tty)
      ISSUE_ID=\$(echo \${ISSUE} | awk '{print \$2}')
      echo "Issue is \$ISSUE_ID"
      EPIC_ID=\$(jira epics|\
        fzf-tmux \
          --query="$1" \
          --select-1 \
          --preview="echo {} | cut -d : -f 1 |
            xargs -I % sh -c 'jira view %'" \
          --bind 'enter:execute/
            echo {} | cut -d ':' -f 1 | xargs -I % sh -c "echo %"/+abort' \
        --exit-0
      )
      jira epic add \
        ${EPIC_ID} \
        ${ISSUE_ID}
  - name: sprint-add
    help: add issue to active sprint for project
    options:
      - name: next
        short: 'n'
        type: bool
        help: add issue to next sprint, rather than the active one
    args:
      - name: ISSUE
        required: true
      - name: PROJ
    script: |-
      state={{if options.next}}future{{else}}active{{end}}
      project={{if args.PROJ}}{{args.PROJ}}{{else}}DATA{{end}}
      issue={{args.ISSUE}}
      echo "state: \$state"
      echo "project: \$project"
      if [ "\$project" = "DATA" ]; then
        board_id=360
      else
        board_id=\$({{jira}} req "/rest/agile/1.0/board?projectKeyOrId=\$project&type=scrum" --gjq values.0.id)
      fi
      echo "board_id: \$board_id"
      sprint_id=\$({{jira}} req "/rest/agile/1.0/board/360/sprint?state=\$state" --gjq values.0.id)
      echo "sprint: \$sprint_id"
      if [ "\$sprint_id" = "" ]; then
        echo "ERROR No \$state sprint" >&2
        exit 1
      fi
      {{jira}} req -M POST "/rest/agile/1.0/sprint/\$sprint_id/issue" "{\"issues\":[\"\$issue\"]}" > /dev/null 2>&1 || true

EOF

case $JIRA_OPERATION in
  create)
    cat << EOF
issuetype: Task
overrides:
  priority: Minor (P3)
  assignee: ${JIRA_USER_ID}
  reporter: ${JIRA_USER_ID}
EOF
      ;;
      #    take)
      #      echo "test"
      #      ;;
    # list)
    #  echo "assignee: ${JIRA_USER_ID}"
    # echo "template: table"
esac

