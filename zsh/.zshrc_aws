# Command completion
complete -C '/usr/local/bin/aws_completer' aws

function all_accounts_query() {
  if [ -z "${1}" ]; then
    echo "Enter a quoted string as the command to run in each account"
    return 1
  fi
  for ACCOUNT_ID in $(aws organizations list-accounts --profile "${AWS_ORG_PAYER}" | jq -r '.Accounts[] | select(.Status == "ACTIVE").Id'); do
    PROFILE_NAME=$(
      aws organizations \
      list-tags-for-resource \
      --resource-id "${ACCOUNT_ID}" \
      --profile "${AWS_ORG_PAYER}" |\
      jq -r '
        .Tags[]
          | select(.Key == "AwsProfile")
          | .Value
      '
    )
    echo "Profile: ${PROFILE_NAME}"
    eval "AWS_PROFILE=${PROFILE_NAME} ${1}"
  done
}

function assume_role() {
  if [ -z "$3" ]; then
    echo "No role session name provided in \$3, using 'default'"
  fi
  ROLE_SESSION_NAME=${3:-default}
  ASSUME_ROLE=$(aws sts assume-role --role-arn $1 --role-session-name ${ROLE_SESSION_NAME} --profile $2)
  export AWS_ACCESS_KEY_ID=$(echo $ASSUME_ROLE | jq -r '.Credentials.AccessKeyId')
  export AWS_SECRET_ACCESS_KEY=$(echo $ASSUME_ROLE | jq -r '.Credentials.SecretAccessKey')
  export AWS_SESSION_TOKEN=$(echo $ASSUME_ROLE | jq -r '.Credentials.SessionToken')
}

function aws_ssm_rdp() {
  if [ -z "$1" ]; then
    echo "No instance id provided!"
    return 1
  fi
  if [ -z "$2" ]; then
    echo "No profile provided, using default"
    aws ssm start-session --target ${1} \
    --document-name AWS-StartPortForwardingSession \
    --parameters '{"portNumber":["3389"],"localPortNumber":["23389"]}'
  else
    aws ssm start-session --target ${1} \
    --profile ${2} \
    --document-name AWS-StartPortForwardingSession \
    --parameters '{"portNumber":["3389"],"localPortNumber":["23389"]}'
  fi
  }

function aws_ssm_ssh() {
  aws ssm start-session --target ${1} \
    --document-name AWS-StartPortForwardingSession \
    --parameters '{"portNumber":["22"],"localPortNumber":["2222"]}'
}

function aws_ssm() {
  if [ -z "$1" ]; then
    echo "No instance id provided!"
    return 1
  fi
  if [ -z "$2" ]; then
    echo "No profile provided, using default"
    aws ssm start-session --target ${1}
  else
    aws ssm start-session --target ${1} --profile ${2}
  fi
}

function aws_account_names() {
  aws resourcegroupstaggingapi get-tag-values --key AwsProfile --profile "${AWS_ORG_PAYER}"
}

function aws_accounts() {
  aws organizations list-accounts \
    jq -r '
      .Accounts[] | .Id as $id
      | "aws organizations list-tags-for-resource --resource-id \($id)
      | jq -r '
          "'"'.Tags[]
          | select(.Key==\"AwsProfile\").Value'"'"'
          | xargs -I{} echo \($id),{}"
    ' | bash
}

function aws_org_accounts() {
  aws organizations list-accounts --profile "${AWS_ORG_PAYER}" |\
    jq '
      [
        .[][] | select(.Status == "ACTIVE") | pick(.Name, .Id)
      ]
    '
}

function aws_bucket_usage() {

  echo ${@}

  if [ -z "${1+x}" ]; then
     echo "Bucket name must be provided as first arg!!!"
  else
    BUCKET="${1}"
  fi

  if [ -z "${2+x}" ]; then
    echo "No aws profile provided as second arg.  Using default profile"
  else
    AWS_PROFILE="${2}"
  fi

  AWS_PROFILE=${AWS_PROFILE} \
    aws cloudwatch get-metric-statistics \
      --namespace AWS/S3 \
      --metric-name NumberOfObjects \
      --dimensions \
        Name=BucketName,Value="${BUCKET}" \
        Name=StorageType,Value=AllStorageTypes \
      --start-time "$(date -u -v-15m +'%Y-%m-%dT%H:%M:%SZ')" \
      --end-time "$(date -u -v-1d +'%Y-%m-%dT%H:%M:%SZ')" \
      --period 86400 \
      --statistics Sum \
      --query 'Datapoints[?Sum!=`null`].[Timestamp,Sum]' |\
    jq '.[][1]' |\
    sort |\
    uniq -c
}

function aws_export_route53() {Aa
  if [ "${1}" == "help" ]; then
    echo "Run this command with the hosted zone ID (e.g. /hostedzone/Z12345) as the first arg"
    echo "Optionally, provide an AWS PROFILE as the second arg."
    return 0
  fi
  if [ -z "${1+x}" ]; then
    echo "No zone provided as first arg"
    return 1
  else
    local HOSTED_ZONE_ID="${1}"
  fi
  aws route53 \
    list-resource-record-sets \
    --hosted-zone-id "${HOSTED_ZONE_ID}" |\
    jq '
      [
        .ResourceRecordSets[]
        |
          {
            name: .Name,
            type: .Type,
            ttl: (.TTL // null),
            records: (if .ResourceRecords then .ResourceRecords | map(.Value) else null end),
            alias: (if .AliasTarget then .AliasTarget else null end)}
         | if .records == null then del(.records) else del(.alias) end
      ]
    '
}

function aws_instances_by_tag() {
  cat .ec2_instance_info.json |\
  jq -r '
  .Reservations[].Instances[] |
    select(.State.Name == "stopped") |
    {
      Instance: .InstanceId,
      Name: ( .Tags[]|select(.Key=="Name")|.Value // .InstanceId ),
      PrivateIp: .PrivateIpAddress,
      PublicIp: .PublicIpAddress,
      State: {
        Name: .State.Name,
        TransitionReason: .StateTransitionReason,
      },
      Tags: (if .Tags? then reduce (.Tags[] | {(.Key): (.Value)}) as $item ({}; . + $item) else {} end)
    }
  ' |\
  mlr --j2c flatten then unsparsify
}

function aws_get_policy() {
  if [ -z "$1" ]; then
    echo "No policy arn provided!"
    return 1
  fi
  local POLICY_ARN="${1}"
  aws iam get-policy-version \
    --version-id $(aws iam get-policy --policy-arn "${POLICY_ARN}" | jq -r .Policy.DefaultVersionId) \
    --policy-arn "${POLICY_ARN}"
}

function aws_search_public_enis() {
  local AWS_PROFILE="${2:-${AWS_PROFILE:-default}}"
  AWS_PROFILE="${AWS_PROFILE}" \
    aws ec2 describe-network-interfaces |\
    jq -r --arg search "$1" '
      .NetworkInterfaces[]
      | select(
        .Association //{}
        | .PublicIp //[]
        | . == "($search)"
      )
    '
}

function aws_search_private_enis() {
  aws ec2 describe-network-interfaces |\
    jq -r --arg search "$1" '
      .NetworkInterfaces[]
      | select(
        .PrivateIpAddress == "($search)"
      )
    '
}

get_instances_by_ip() {
  local AWS_PROFILE="default"
  IP_ADDRESS="${1}"
  if [ -z "${2}" ]; then
    echo "No profile used, using default profile."
    echo "Pass an AWS profile in as the second argument to use it."
  else
    AWS_PROFILE="${2}"
  fi
  aws ec2 describe-instances \
    --profile "${AWS_PROFILE}" |\
    jq --arg ip "${IP_ADDRESS}" '
      [
        .[][].Instances[]
        | select(.PrivateIpAddress == ($ip))
        | {
             "InstanceId": .InstanceId,
             "InstanceType": .InstanceType,
             "State": .State.Name,
             "Tags": (.Tags | from_entries)
          }
      ]
      '
}

function aws_accounts_and_names() {
  for ACCOUNT_ID in $(aws organizations list-accounts --profile "${AWS_ORG_PAYER}" | jq -r '.Accounts[].Id'); do
    PROFILE_NAME=$(
      aws organizations \
      list-tags-for-resource \
      --resource-id "${ACCOUNT_ID}" \
      --profile "${AWS_ORG_PAYER}" |\
      jq -r '
        .Tags[]
          | select(.Key == "AwsProfile")
          | .Value
      '
    )
    echo "${ACCOUNT_ID},${PROFILE_NAME}"
  done
}

function aws_decode() {
  aws sts \
    decode-authorization-message \
    --encoded-message \
    $@ |\
    jq -r '.DecodedMessage | fromjson'
}

function awsp() {
  # Sets the AWS profile via environment variable
  if [ -z "$1" ]; then
    echo "FATAL: Enter a profile"
    return 1
  else
    export AWS_PROFILE=$1
  fi
}

function clear_aws() {
  unset AWS_ACCESS_KEY_ID
  unset AWS_SECRET_ACCESS_KEY
  unset AWS_SESSION_TOKEN
}

function ecr() {
  if [ -z "$1" ]; then
    $(aws ecr get-login --no-include-email --registry-ids ${ECR_REGISTRY} --region us-east-1)
  else
    $(aws ecr get-login --no-include-email --registry-ids ${ECR_REGISTRY} --region us-east-1 --profile $1)
  fi
}

function expand_aws_attribute(){
while read LINE; do
  DIR_PATH="${HOME}/src/github.com/iann0036/iam-dataset"
  if [ -d "${DIR_PATH}" ]; then
    RAW="-r"
    PREFIX="${LINE%:*}"
    PREFIX="${PREFIX#\"}"
    SUFFIX="${LINE#*:}"
    SUFFIX="${SUFFIX%\"}"
    SUFFIX_REGEX=^${SUFFIX//\*/\.\*}$
    if [[ "${LINE}" =~ ^\".*\"$ ]] || [[ "${LINE}" =~ ^\".*\",$ ]]; then
      RAW=""
    fi
    RESULTS=$(cat "${DIR_PATH}/aws/iam_definition.json" |\
      jq \
        ${RAW} \
        --arg prefix "${PREFIX}" \
        --arg suffix "${SUFFIX_REGEX}" \
        '.[]
        | select(.prefix == $prefix)
        | .privileges[].privilege
        | select( . | test($suffix)?)
        | ( $prefix + ":" + . )
        '
    )
    if [[ "${RAW}" == '' ]]; then
      echo "${RESULTS}" | sed 's/$/,/'
    else
     echo "${RESULTS}"
    fi
  else
    git_clone git@github.com:iann0036/iam-dataset
  fi
done < "${1:-/dev/stdin}"
}

function expand_aws_attribute_old(){
while read LINE
do
  # set -x
  DIR_PATH="${HOME}/src/github.com/iann0036/iam-dataset"
  if [ -d "${DIR_PATH}" ]; then
    CLEAN=$( echo "${LINE}" | tr -d '*')
    RAW="-r"
    if [[ "${CLEAN}" =~ ^\".*\"$ ]]; then
      CLEAN=$(echo ${CLEAN} | cut -d \" -f2)
      RAW=""
    fi
    if [[ "${CLEAN}" =~ ^\".*\",$ ]]; then
      CLEAN=$(echo ${CLEAN} | cut -d \" -f2)
      RAW=""
    fi
    RESULTS=$(cat "${DIR_PATH}/map.json" |\
    jq \
      ${RAW} \
      --arg key "${CLEAN}" \
      '.sdk_method_iam_mappings[][] |
       select(.action | startswith($key)) |
       .action ' | sort | uniq
    )
    if [[ "${RAW}" == "" ]]; then
      echo "${RESULTS}" | sort | uniq | sed 's/$/,/'
    else
     echo "${RESULTS}" | sort | uniq
    fi
 else
   echo "Please Clone 'https://github.com/iann0036/iam-dataset'"
  fi
done < "${1:-/dev/stdin}"
}

function get_dns_records() {
  PROFILE="${1}"
  HOSTED_ZONE_ID="${2}"

  if [ -z "${PROFILE+x}" ] || [ -z "${HOSTED_ZONE_ID+x}" ]; then
    echo "Not enough args!"
    echo '$1 = AWS_PROFILE'
    echo '$2 = HOSTED_ZONE_ID'
    return 1
  fi
  aws route53 list-resource-record-sets \
    --hosted-zone "${HOSTED_ZONE_ID}" \
    --profile "${PROFILE}" |\
      jq 'reduce .ResourceRecordSets[] as $record
        ({}; .[$record.Name] =
        if $record | has("AliasTarget")
        then $record.AliasTarget.DNSName
        else $record.ResourceRecords[].Value
        end)
      '
}

function get_instances() {
  if [ -z "${1+x}" ]; then
    echo "Must provide instance Name regex search term as first arg!"
    return 1
  fi
  if [ -z "${2+x}" ]; then
    echo "Second arg as AWS_PROFILE not provided, using env var or default profile..."
  fi
  if [ "${3}" = "full" ]; then
    JQ_FILTER=""
  else
    JQ_FILTER="| pick(
        .InstanceId,
        .InstanceType,
        .PrivateIpAddress,
        .PublicIpAddress,
        .State.Name,
        .KeyName
      ) + {Tags: (.Tags | from_entries)}"
  fi

  local SEARCH="${1}"
  local AWS_PROFILE="${2:-${AWS_PROFILE:-default}}"
  aws ec2 describe-instances --profile $AWS_PROFILE |\
    jq --arg search "${SEARCH}" '
      [
        .[][].Instances[]
        | select(.Tags[]
        | select(.Key == "Name" and
          (
            .Value | test("\($search)")
          )
        )
      ) '"${JQ_FILTER}"'
      ]
    '
}

function get_instances_all() {
  IP_ADDRESS="${1}"
  if [ -z "${1+x}" ]; then
    echo "Must provide instance Name regex search term as first arg!"
    return 1
  fi
  if [ -z "${2+x}" ]; then
    echo "Second arg as AWS_PROFILE not provided, using env var or default profile..."
  fi
  local AWS_PROFILE="${2:-${AWS_PROFILE:-default}}"
    aws ec2 describe-instances \
    --filters Name=instance-state-name,Values=running |\
    jq '
      [
        .Reservations[].Instances[]
        | (
            if .Tags? then reduce (
              .Tags[] | {(.Key): (.Value)}
              ) as $item ({}; . + $item) else {} end
          ) +
          {
            "PublicIp": (.PublicIpAddress // null),
            "PrivateIp": .PrivateIpAddress,
            "InstanceId": .InstanceId,
            "InstanceType": .InstanceType
          }
       ]
     '
}

function get_me_creds() {
  aws sso get-role-credentials \
    --account-id $(aws configure get sso_account_id --profile ${AWS_PROFILE}) \
    --role-name $(aws configure get sso_role_name --profile ${AWS_PROFILE}) \
    --access-token $(find ~/.aws/sso/cache -type f ! -name "botocore*.json" | xargs jq -r .accessToken) \
    --region $(aws configure get region --profile ${AWS_PROFILE}) |\
  jq -r '.roleCredentials |
      {
        "AWS_ACCESS_KEY_ID": .accessKeyId,
        "AWS_SECRET_ACCESS_KEY": .secretAccessKey,
        "AWS_SESSION_TOKEN": .sessionToken,
        "AWS_CREDENTIALS_EXPIRATION": (.expiration / 1000 | todate)
      } | keys[] as $k | "export \($k)=\(.[$k])"'
}

function kms_decrypt {
    if [ -z "$1" ]
    then
        echo "FATAL: Enterciphertext as the first arg"
        return 1
    fi
    aws kms decrypt --ciphertext-blob fileb://<(echo "$1" | base64 -d) --output text --query Plaintext | base64 -d
}

function kms_file() {
    if [ -z "$1" ]
    then
        echo "FATAL: Enter a key alias the first arg (starting with alias)"
        return 1
    fi
    if [ -z "$2" ]
    then
        echo "FATAL: Enter a secret value as the second arg"
        return 1
    fi
    aws kms encrypt --key-id "${1}" --plaintext fileb://"$2" --output text --query CiphertextBlob | clip
}

function kms_secret() {
    if [ -z "$1" ]
    then
        echo "FATAL: Enter a key alias the first arg (starting with alias)"
        return 1
    fi
    if [ -z "$2" ]
    then
        echo "FATAL: Enter a secret value as the second arg"
        return 1
    fi
    aws kms encrypt --key-id "${1}" --plaintext fileb://<(echo -n "$2") --output text --query CiphertextBlob | clip
}

function list_suppressed_ses_destinations() {

  AWS_PROFILE=$1

  if [ -z "${1}" ]; then
    echo "No profile provided as first positional arg! Using default aws credential chain"
  fi

  RESULTS=$(
    aws sesv2 \
    list-suppressed-destinations
  )
  echo "$RESULTS" | jq -r '.SuppressedDestinationSummaries[] | [.EmailAddress,.Reason] | @tsv'

  NEXT_TOKEN=$(echo $RESULTS | jq -r '.NextToken')

  while [ "$NEXT_TOKEN" != "null" ]
  do
      RESULTS=$(
        aws sesv2 \
        list-suppressed-destinations \
        --next-token $NEXT_TOKEN
      )
      NEXT_TOKEN=$(echo $RESULTS | jq -r '.NextToken')
      echo "$RESULTS" | jq -r '.SuppressedDestinationSummaries[] | [.EmailAddress,.Reason] | @tsv'
  done
}

function okta_auth() {
  DUO_DEVICE="phone1"
  if [[ $(ioreg -p IOUSB -l -w 0 | grep '"USB Vendor Name" = "Yubico"') ]]; then
    DUO_DEVICE='u2f'
  fi
  if [[ -z ${1+x} ]]; then PROFILES=${AWS_PROFILE}; else PROFILES=${1}; fi
  for PROFILE in $(echo ${PROFILES//,/ });
  do
    echo "profile is: ${PROFILE}"
    aws-okta \
      --debug \
      --mfa-provider DUO \
      --mfa-duo-device ${DUO_DEVICE} \
      --mfa-factor-type web \
      --assume-role-ttl 12h \
      --session-ttl 12h \
      write-to-credentials \
      ${PROFILE} \
      ~/.aws/credentials
    EXPIRATION=$(
      aws-okta \
        cred-process \
        ${PROFILE} | \
      jq -r .Expiration)
    echo "Expiration: ${EXPIRATION}"
  done
}

function okta_auth_manual() {
    if [ -z "$1" ]; then
        echo "Must provide a profile name!"
        return 1
    fi
    aws-okta --debug --mfa-provider DUO --mfa-duo-device u2f --mfa-factor-type web write-to-credentials $1 ~/.aws/credentials
}

function validate_aws_credentials() {
  if [[ -z ${1+x} ]]; then PROFILES=${AWS_PROFILE}; else PROFILES=${1}; fi
  echo "profiles list: $PROFILES"
  for PROFILE in ${PROFILES//,/ }
  do
    AWS_PROFILE=${PROFILE}
    echo "AWS Profile: ${AWS_PROFILE}"
    aws --no-cli-pager sts get-caller-identity --profile $AWS_PROFILE
  done
}

# Non-function lines
alias aws="aws --no-cli-pager"

aws_lookup() {
  AWS_ACCOUNT="${1}"
  if [[ -z ${AWS_ACCOUNT//[[:digit:]]} ]]; then
    AWS_PROFILE=$(yq -e \
      ".[] | select(.id == \"${AWS_ACCOUNT}\") | path | key" \
       "${HOME}/.aws/sso_accounts.yaml"
    )
  else
    AWS_PROFILE=$(yq -e \
      ".[] | select(key == \"${AWS_ACCOUNT}\").id" \
       "${HOME}/.aws/sso_accounts.yaml")
  fi

  echo "${AWS_PROFILE}"

  SET_ENV="${2}"
  if [[ "${SET_ENV}" == '--env' ]]; then
    export AWS_PROFILE="${AWS_PROFILE}"
  fi
}

get_abac_tags() {
  if [ -z "${1}" ]; then
    echo "Must provide an account name for AWS profile!!!"
    return 1
  fi
  aws --profile "${1}" \
  cloudtrail \
  lookup-events \
  --start-time $(date -v-1d -u +%Y-%m-%dT%H:%M:%SZ) \
  --lookup-attributes AttributeKey=EventName,AttributeValue=AssumeRoleWithSAML |\
  jq '
    [
      .Events |
      sort_by(.EventTime) |
      reverse
    ][] |
    reduce .[] as $event (
      {}; .[$event.Username] = ($event.CloudTrailEvent
        | fromjson
        | .requestParameters.principalTags
      )
    )
  '
}

aws_rds_aurora_versions() {
  ENGINES="${1}"
  CLASSES="${2}"
  if [[ "${ENGINES}" == '' ]]; then
    ENGINES=(
      'aurora-mysql'
      'aurora-postgresql'
    )
    echo "Default ENGINES used '${ENGINES[*]}'"
  fi

  if [[ "${CLASSES}" == '' ]]; then
    CLASSES=(
      'db.serverless'
      'db.t4g.medium'
    )
    echo "Default CLASSES used '${CLASSES[*]}'"
  fi

  for CLASS in "${CLASSES[@]}"; do
    for ENGINE in "${ENGINES[@]}"; do
      echo "Getting Results for '${ENGINE}' for '${CLASS}'"
      echo -e "EngineVersion\tStorageType"
      aws rds \
        describe-orderable-db-instance-options \
        --engine "${ENGINE}" \
        --db-instance-class "${CLASS}" \
        --query 'OrderableDBInstanceOptions[]' \
        --output json |\
       jq -r '
         .[] | [
           .EngineVersion,
           .StorageType
         ] | @tsv'

    done
  done
}
